[config]
default_to_workspace = false

[tasks.set-env]
env_files = [".env"]

# ============ BUILD TASKS ============
[tasks.build-servers]
extend = "set-env"
description = "Build the project."
script = '''
    # Build the each MCP server in the workspace
    cargo build --release -p sample-calculator && \

    # Move the built binaries to a specific directory
    mkdir -p target/release/mcp-servers && \
    find target/release -name "*-mcp-server" -type f -exec basename {} \; | while read binary; do \
        if [ ! -f "target/release/mcp-servers/$binary" ]; then \
            cp "target/release/$binary" "target/release/mcp-servers/"; \
        fi; \
    done && \

    # Show the built binaries with detailed information
    printf "\n\033[1;32m=== Built MCP Server Binaries ===\033[0m\n" && \
    printf "\033[1;36mBinary Name\t\t\tSize\t\tTimestamp\033[0m\n" && \
    printf "\033[1;36m------------------------------------------------------------\033[0m\n" && \
    for binary in target/release/mcp-servers/*; do \
        if [ -f "$binary" ]; then \
            name=$(basename "$binary"); \
            size=$(ls -lh "$binary" | awk '{print $5}'); \
            timestamp=$(stat -f "%Sm" -t "%Y-%m-%dT%H:%M:%S" "$binary"); \
            printf "\033[1;33m%s\033[0m\t\t\033[1;35m%s\033[0m\t\t\033[1;37m%s\033[0m\n" "$name" "$size" "$timestamp"; \
        fi; \
    done && \
    printf "\033[1;36m------------------------------------------------------------\033[0m\n"
'''

[tasks.build-client]
extend = "set-env"
description = "Build the client."
dependencies = ["build-servers"]
script = '''
    # Build the client
    cargo build --release -p mcp-client
'''

[tasks.build-agent]
extend = "set-env"
description = "Build the agent."
dependencies = ["build-client"]
script = '''
    # Build the agent
    cargo build --release -p mcp-agent
'''


# ============ TEST TASKS =============
[tasks.nextest]
extend = "set-env"
dependencies = ["build-agent"]
description = "Run all tests in the project."
install_crate = "cargo-nextest"
script = "cargo nextest run --workspace --status-level all --test-threads=1 ${@}"

# ============ LINT TASKS ===========
[tasks.format-all]
dependencies = ["sort-cargo-toml", "clippy", "reformat"]
description = "Format all code in the project."

[tasks.sort-cargo-toml]
description = "Sort the Cargo.toml files in the project."
install_crate = "taplo-cli"
script = "taplo fmt --option reorder_keys=true"

[tasks.reformat]
description = "Reformat the code using rustfmt."
script = "cargo fmt -- --emit files"


# ============ UTILITY TASKS ============
[tasks.create-new-server]
description = "Create a new MCP server from template. Usage: cargo make create-new-server <server-name>"
script = '''
    if [ -z "${1}" ]; then
        echo "Error: Server name is required"
        echo "Usage: cargo make create-new-server <server-name>"
        echo "Example: cargo make create-new-server weather"
        exit 1
    fi
    
    # Make sure the script is executable
    chmod +x scripts/create-new-server.sh
    
    # Execute the create server script
    ./scripts/create-new-server.sh "${1}"
'''
